// SPDX-License-Identifier: MIT OR Apache-2.0
pragma solidity ^0.8.3;

import "@openzeppelin/contracts/utils/Counters.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol";
import "@openzeppelin/contracts/access/AccessControlEnumerable.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/utils/Strings.sol";

contract OPVMultipleFactory is
    ERC721,
    AccessControlEnumerable,
    ERC721Enumerable,
    Ownable
{
    using Counters for Counters.Counter;
    Counters.Counter private _itemIds;

    mapping(address => bool) public approvalWhitelists;
    mapping(uint256 => bool) public lockedTokens;
    mapping(uint256 => address) public creators;

    mapping(uint256 => uint256) private saveTokenURI;

    string private _baseTokenURI;

    string private _marketplaceAddress;

    uint256 public _feeMint;

    address public _feeAddress;

    bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");

    IERC20 public OPV;

    event LogBatchMint(
        address user,
        uint256 fromId,
        uint256 toId,
        uint256 dataId
    );

    constructor(
        string memory defaultUri,
        address marketplaceAddress,
        address opvAddress
    ) ERC721("OpenLive NFT Factory", "OPVF") {
        OPV = IERC20(opvAddress);
        _baseTokenURI = defaultUri;
        addApprovalWhitelist(marketplaceAddress);
    }

    function tokenURI(uint256 tokenId)
        public
        view
        override
        returns (string memory)
    {
        require(
            _exists(tokenId),
            "ERC721Metadata: URI query for nonexistent token"
        );

        string memory baseURI = _baseURI();
        return
            bytes(baseURI).length > 0
                ? string(
                    abi.encodePacked(
                        baseURI,
                        Strings.toString(saveTokenURI[tokenId])
                    )
                )
                : "";
    }

    function _baseURI() internal view virtual override returns (string memory) {
        return _baseTokenURI;
    }

    function creatorOf(uint256 tokenId) external view returns (address) {
        return creators[tokenId];
    }

    /**
     * @dev Creates a new token for `to`. Its token ID will be automatically
     * assigned (and available on the emitted {IERC721-Transfer} event), and the token
     * URI autogenerated based on the base URI passed at construction.
     *
     * See {ERC721-_mint}.
     *
     */

    function batchMint(address to, uint256 amount) public {
        if (!hasRole(MINTER_ROLE, _msgSender())) {
            require(
                OPV.balanceOf(_msgSender()) >= _feeMint * amount,
                "Mint NFT : Unavailable by balanceOf"
            );
            OPV.transferFrom(_msgSender(), _feeAddress, _feeMint * amount);
        }
        uint256 fiId;
        uint256 laId;
        for (uint256 i = 0; i < amount; i++) {
            // save first Id
            if (i == 0) fiId = mint(to);
            else if (i == amount) laId = mint(to);
            else mint(to);

            // save token URI for batchMint
            saveTokenURI[_itemIds.current()] = fiId;
        }
        emit LogBatchMint(msg.sender, fiId, laId, fiId);
    }

    function mint(address to) internal virtual returns (uint256) {
        _itemIds.increment();
        uint256 tokenId = _itemIds.current();
        require(!_exists(tokenId), "Must have unique tokenId");

        creators[tokenId] = _msgSender();
        _mint(to, tokenId);
        return tokenId;
    }

    function setFeeAddress(address feeAddress) public onlyOwner {
        _feeAddress = feeAddress;
    }

    function setFee(uint256 amount) public onlyOwner {
        _feeMint = amount;
    }

    /**
     * @dev See {IERC721-isApprovedForAll}.
     */
    function isApprovedForAll(address owner, address operator)
        public
        view
        override
        returns (bool)
    {
        if (approvalWhitelists[operator] == true) {
            return true;
        }

        return super.isApprovedForAll(owner, operator);
    }

    /**
     * @dev Allow operation to reduce gas fee.
     */
    function addApprovalWhitelist(address proxy) public onlyOwner {
        require(approvalWhitelists[proxy] == false, "Invalid proxy address");

        approvalWhitelists[proxy] = true;
    }

    /**
     * @dev Remove operation from approval list.
     */
    function removeApprovalWhitelist(address proxy) public onlyOwner {
        approvalWhitelists[proxy] = false;
    }

    /**
     * @dev Lock token to use in game or for rental
     */
    function lock(uint256 tokenId) public {
        require(
            approvalWhitelists[_msgSender()],
            "Must be valid approval whitelist"
        );
        require(_exists(tokenId), "Must be valid tokenId");
        require(!lockedTokens[tokenId], "Token has already locked");
        lockedTokens[tokenId] = true;
    }

    /**
     * @dev Unlock token to use blockchain or sale on marketplace
     */
    function unlock(uint256 tokenId) public {
        require(
            approvalWhitelists[_msgSender()],
            "Must be valid approval whitelist"
        );
        require(_exists(tokenId), "Must be valid tokenId");
        require(lockedTokens[tokenId], "Token has already unlocked");
        lockedTokens[tokenId] = false;
    }

    /**
     * @dev Get lock status
     */
    function isLocked(uint256 tokenId) public view returns (bool) {
        return lockedTokens[tokenId];
    }

    /**
     * @dev Set token URI
     */
    function updateBaseURI(string calldata baseTokenURI) public onlyOwner {
        _baseTokenURI = baseTokenURI;
    }

    /**
     * @dev See {IERC165-_beforeTokenTransfer}.
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual override(ERC721, ERC721Enumerable) {
        require(!lockedTokens[tokenId], "Can not transfer locked token");
        super._beforeTokenTransfer(from, to, tokenId);
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId)
        public
        view
        virtual
        override(AccessControlEnumerable, ERC721, ERC721Enumerable)
        returns (bool)
    {
        return super.supportsInterface(interfaceId);
    }
}